<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.App.Widget" extends="Runtime.Web.Component" 
	module="Runtime.Web.App" model="Runtime.Web.App.WidgetModel"
>

<use name="Runtime.BaseStruct" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.BaseEvent" />
<use name="Runtime.Web.App.PageModel" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.WidgetEvent" />
<use name="Runtime.Web.App.WidgetModel" />
<use name="Runtime.Web.App.WidgetSignal" />


<script>


/**
 * Returns widget key
 */
string getWidgetKey() => this.params["widget_key"];



/**
 * Call route widget model
 */
static async WidgetModel callRouteWidgetModel
(RenderContainer container, PageModel page_model, string widget_key, WidgetModel widget_model) =>
	widget_model;



/**
 * Call route
 */
static async RenderContainer callRouteWidget(RenderContainer container, string widget_key)
{
	/* Page class */
	string page_class = container.layout.page_class;
	
	/* Get page model */
	PageModel page_model = container.getPageModel();
	if (page_model == null) return [ container ];
	
	/* Get widget model */
	WidgetModel widget_model = page_model.widgets[widget_key] |> default WidgetModel null;
	if (widget_model == null) return [ container ];
	
	/* Search */
	widget_model = await static::callRouteWidgetModel(container, page_model, widget_key, widget_model);
	
	/* Set widget model */
	page_model <= widgets <= { widget_key } <= widget_model;
	
	/* Set page model */
	container <= layout <= model <= { page_class } <= page_model;
	
	return [ container ];
}



/**
 * Extend page model
 */
pure PageModel extendPageModel(BaseStruct layout, PageModel model, Dict params, string widget_key) => model;



/**
 * Returns true if need to repaint component
 */
bool isRepaint()
{
	if (this.is_new_element)
	{
		return true;
	}
	/* Check widget model */
	if (this.new_model != this.old_model)
	{
		return true;
	}
	/* Check component params */
	if (not this.equalParams())
	{
		return true;
	}
	/* Check watch model */
	if (this.isRepaintWatch())
	{
		return true;
	}
	return false;
}



/**
 * Create widget
 */
void onCreate()
{
	parent::onCreate();
	
	/* Add widget signal listener */
	Component c = this.getParentComponent();
	this.driver.addEventListener
	(
		classof WidgetSignal,
		c.vdom, this.vdom,
		this.vdom.getPathId(), "onSignal"
	);
}

 
</script>

</class>