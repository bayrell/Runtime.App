/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.App;

use Runtime.lib;
use Runtime.BaseDriver;
use Runtime.BaseStruct;
use Runtime.Context;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.FileNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Message;
use Runtime.Web.App.BusInterface;
use Runtime.Web.App.BusList;
use Runtime.Web.App.BusMethod;
use Runtime.Web.App.BusMiddleware;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;


class SystemBusDriver extends BaseDriver implements BusInterface
{
	
	Collection<BusMethod> bus_methods = null;
	
	
	/**
	 * Start driver
	 */
	public async void startDriver()
	{
		this.bus_methods = Context::getSubEntities(@.entities, classof BusList, classof BusMethod);
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async void sendMessage(Message msg)
	{
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async RemoteCallAnswer remoteBusCall(RemoteCallRequest request)
	{
		RemoteCallAnswer answer = new RemoteCallAnswer
		{
			"object_name": request.object_name,
			"interface_name": request.interface_name,
			"method_name": request.method_name,
		};
		
		string app_name = request.app_name;
		
		/* Set app name */
		answer <= app_name <= @.app_name;
		
		/* Check correct app name */
		if (app_name != "self" and app_name != @.app_name)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new FileNotFound
				(
					app_name,
					_("Runtime", "App"),
					rtl::ERROR_API_WRONG_APP_NAME
				)
			);
			
			/* Set 404 code */
			answer <= new_http_code <= 404;
			
			return answer;
		}
		
		/* Find api method */
		BusMethod api_method = this.findBusMethod(request);
		
		/* Find api by chain */
		api_method = await @.chainAsync(WebApp::FIND_SYSTEM_BUS_CHAIN, [request, api_method]) |> attr 1;
		
		/* If api method does not find */
		if (api_method == null)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new FileNotFound
				(
					request.object_name ~ "::" ~ request.interface_name ~ "::" ~ request.method_name,
					_("Runtime", "Api or method"),
					rtl::ERROR_API_NOT_FOUND
				)
			);
			
			/* Set 404 code */
			answer <= new_http_code <= 404;
			
			return answer;
		}
		
		/* Get api method */
		string class_name = api_method.class_name;
		string class_method_name = api_method.class_method_name;
		
		/* Check if method exists */
		if (not rtl::method_exists(class_name, class_method_name))
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new FileNotFound
				(
					request.object_name ~ "::" ~ request.interface_name ~ "::" ~ request.method_name,
					_("Runtime", "Method"),
					rtl::ERROR_API_NOT_FOUND
				)
			);
			
			/* Set 404 code */
			answer <= new_http_code <= 404;
			
			return answer;
		}
		
		/* Call api */
		try
		{
			/* Middleware */
			list res = await static::callMiddleware(request, answer, class_name, class_method_name);
			request = res[0];
			answer = res[1];
			
			fn f = rtl::method(class_name, class_method_name);
			list res = await f(request, answer);
			answer = res[1];
		}
		catch (ApiException e)
		{
			/* Set exception */
			answer = answer::exception(answer, e);
		}
		catch (RuntimeException e)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new ApiException
				(
					e.getErrorMessage(),
					rtl::ERROR_FATAL
				)
			);
			
			/* Set error name */
			answer <= error_name <= e.getClassName();
		}
		
		return answer;
	}
	
	
	
	/**
	 * Render chain
	 * Call route middlewares
	 */
	static async list callMiddleware
	(
		RemoteCallRequest request, RemoteCallAnswer answer,
		string class_name, string class_method_name
	)
	{
		Collection<BusMiddleware> middlewares = [];
		
		/* Get middleware from class */
		Collection annotations = rtl::getClassAnnotations(class_name, []);
		middlewares = middlewares.concatIm
		(
			annotations.filter( lib::isInstance(classof BusMiddleware) )
		)
		
		/* Get middleware from method */
		Dict res = rtl::getMethodsAnnotations(class_name);
		Collection annotations = res[class_method_name] |> default Collection [];
		middlewares = middlewares.concatIm
		(
			annotations.filter( lib::isInstance(classof BusMiddleware) )
		);
		
		/* Run each middleware */
		for (int i=0; i<middlewares.count(i); i++)
		{
			BusMiddleware m = middlewares.item(i);
			Collection arr = rs::split("::", m.value);
			string m_class_name = arr.get(0, "");
			string m_method_name = arr.get(1, "");
			fn f = rtl::method(m_class_name, m_method_name);
			
			/* Run method */
			list res = await f(request, answer);
			request = res[0];
			answer = res[1];
		}
		
		return [ request, answer ];
	}
	
	
	
	/**
	 * Find api method
	 */
	BusMethod findBusMethod(RemoteCallRequest request)
	{
		Collection<BusMethod> bus_methods = this.bus_methods;
		string object_name = request.object_name;
		string interface_name = request.interface_name;
		string method_name = request.method_name;
		for (int i=0; i<bus_methods.count(); i++)
		{
			BusMethod api_method = bus_methods[i];
			if
			(
				api_method.object_name == object_name and
				api_method.interface_name == interface_name and
				api_method.method_name == method_name
			)
			{
				return api_method;
			}
		}
		return null;
	}
	
	
}