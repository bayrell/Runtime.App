/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web.App;

use Runtime.re;
use Runtime.rs;
use Runtime.lib;
use Runtime.BaseDriver;
use Runtime.BaseStruct;
use Runtime.Context;
use Runtime.LambdaChain;
use Runtime.LambdaChainClass;
use Runtime.Web.RenderDriver;
use Runtime.Web.App.BusInterface;
use Runtime.Web.App.LayoutModel;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;
use Runtime.Web.App.RenderContainer;
use Runtime.Web.App.Request;
use Runtime.Web.App.Response;
use Runtime.Web.App.Route;
use Runtime.Web.App.RouteList;
use Runtime.Web.App.RouteMiddleware;


@LambdaChainClass{}
class WebApp extends BaseDriver
{
	/* Chains */
	static const string LAYOUT_CHAIN = "Runtime.Web.App.Layout";
	static const string PATTERN_CHAIN = "Runtime.Web.App.Pattern";
	static const string RENDER_CHAIN = "Runtime.Web.App.Render";
	static const string TITLE_CHAIN = "Runtime.Web.App.Title";
	static const string EXTERNAL_BUS_CHAIN = "Runtime.Web.App.ExternalBus";
	
	
	/* Render Chain */
	static const int RENDER_CHAIN_START = 500;
	static const int RENDER_CHAIN_CREATE_LAYOUT_MODEL = 950;
	static const int RENDER_CHAIN_CHANGE_LAYOUT_MODEL = 1000;
	static const int RENDER_CHAIN_SET_FRONTEND_ENVIROMENTS = 1500;
	static const int RENDER_CHAIN_SET_FRONTEND_STORAGE = 1500;
	static const int RENDER_CHAIN_CALL_ROUTE_BEFORE = 2000;
	static const int RENDER_CHAIN_CALL_ROUTE_MIDDLEWARE = 2500;
	static const int RENDER_CHAIN_CALL_ROUTE = 3000;
	static const int RENDER_CHAIN_CALL_PAGE_NOT_FOUND = 3100;
	static const int RENDER_CHAIN_CALL_ROUTE_AFTER = 3500;
	static const int RENDER_CHAIN_RESPONSE_BEFORE = 4000;
	static const int RENDER_CHAIN_RESPONSE = 4500;
	static const int RENDER_CHAIN_RESPONSE_AFTER = 5000;
	
	
	/* Variables */
	Collection<Route> routes = null;
	Vector history = new Vector();
	string route_prefix = "";
	
	
	/**
	 * Init app
	 */
	static Context appInit(Context c)
	{
		return c::appInit(c);
	}
	
	
	
	/**
	 * Start app
	 */
	static async Context appStart(Context c)
	{
		return await c::appStart(c);
	}
	
	
	
	/**
	 * Start driver
	 */
	public async void startDriver()
	{
		await parent::startDriver();
		
		/* Get routes */
		this.routes = Context::getSubEntities(@.entities, classof RouteList, classof Route);
		this.route_prefix = @.env("X-ROUTE-PREFIX", "");
		
		#ifcode ES6 then
		
		/* Add mouse listener */
		var body = document.getElementsByTagName("body")[0];
		body.addEventListener("click", Runtime.Web.App.WebApp.js_click);
		
		/* Add history listener */
		window.onpopstate = Runtime.Web.App.WebApp.js_onpopstate;
		
		#endif
	}
	
	
	
	/**
	 * Web App Run
	 */
	static async void appRun()
	{
		string root_model = window.document.@querySelector("#root_model").value;
		root_model = rs::base64_decode_url(root_model);
		LayoutModel layout = rtl::json_decode(root_model);
		
		@.getDriver("RenderDriver")
			.setLayout(layout)
			.setupCSS( window.document.@querySelector("#root_style") )
			.setupController
			(
				"root",
				window.document.@querySelector("#root"),
				layout.layout_class,
				[]
			)
			.repaint()
		;
	}
	
	
	
	/**
	 * Render request
	 */
	async RenderContainer renderRequest(Request request)
	{
		Route route = null;
		Dict<string> params = null;
		
		/* Search route */
		list res = this.findRoute(request);
		route = res.item(0); params = res.item(1);
		
		RenderDriver render = @.getDriver("RenderDriver");
		
		/* Create render container  */
		RenderContainer container = new RenderContainer
		{
			"request": request,
			"route": route,
			"route_params": params,
			"layout": (render != null) ? render.layout : null,
		};
		
		/* Render container */
		container = await static::callRenderChain(container);
		
		/* Result */
		return container;
	}
	
	
	
	/**
	 * Find route
	 */
	list<string, string> findRoute(Request request)
	{
		Route route = null;
		Dict<string> params = null;
		
		string request_uri = request.uri;
		string route_prefix = request.route_prefix;
		
		request_uri = static::splitRoutePrefix(request_uri, route_prefix);
		if (request_uri === null) return [route, params];
		
		/* Find route */
		for (int i=0; i<this.routes.count(); i++)
		{
			Route info = this.routes.item(i);
			Collection<string> matches = re::matchAll( info.uri_match, request_uri );
			if (matches != null)
			{
				matches = matches.get(0, null);
				if (matches) matches = matches.removeFirstIm();
				params = info::getParams(matches, info);
				route = info;
				break;
			}
		}
		
		return [route, params];
	}
	
	
	
	/**
	 * Open url
	 */
	public async void openUrl(string href = "/")
	{
		#ifcode JAVASCRIPT then
		var obj = { "href": href, };
		history.pushState(obj, "", href);
		#endif
		this.history.pushValue(href);
		await this.renderPage(href);
	}
	
	
	
	/**
	 * Render page
	 */
	public async void renderPage(string url = "/")
	{
		string host = "";
		string method = "";
		string protocol = "";
		
		#ifcode ES6 then
		host = window.location.hostname;
		protocol = window.location.protocol.substr(0, window.location.protocol.length - 1);
		#endif
		
		int pos = rs::strpos(url, "?");
		string uri = (pos >= 0) ? rs::substr(url, 0, pos) : url;
		string get = (pos >= 0) ? rs::substr(url, pos + 1) : "";
		Dict<string> query = new Map();
		
		if (get != "")
		{
			Collection arr = rs::explode("&", get);
			arr.each
			(
				void (string s) use (query)
				{
					Collection arr = rs::explode("=", s);
					string key = arr[0];
					string value = arr[1];
					Collection keys = static::getQueryKeys(key);
					query = rtl::setAttr(query, keys, value);
				}
			);
		}
		
		Request request = new Request
		{
			"uri": uri,
			"host": host,
			"protocol": protocol,
			"query": query.toDict(),
			"route_prefix": this.route_prefix,
		};
		
		/* Render request */
		RenderContainer container = await this.renderRequest(request);
		
		/* Render container */
		@.getDriver("RenderDriver")
			.setLayout(container.layout)
			.repaint()
		;
	}
	
	
	
	/**
	 * Get query keys
	 */
	pure Collection getQueryKeys(string key)
	{
		key = rs::replace("]", "", key);
		Collection arr = rs::split("\\[", key);
		return arr;
	}
	
	
	
	/**
	 * JS Click Event
	 */
	public static void @js_click(var e)
	{
		@ = rtl::getContext();
		WebApp web_app = @.getDriver("WebApp");
		
		#ifcode JAVASCRIPT then
		var elem = e.target;
		
		if (elem.tagName == "A")
		{
			var target = elem.getAttribute("target");
			var href = elem.getAttribute("href");
			if (target == null)
			{
				e.preventDefault();
				(async () => {
					try { await web_app.openUrl(ctx, href); }
					catch (e) { console.log(e.stack); }
				})();
				return false;
			}
		}
		
		#endif
	}
	
	
	
	/**
	 * JS onpopstate event
	 */
	public static void @js_onpopstate(var e)
	{
		@ = rtl::getContext();
		WebApp web_app = @.getDriver("WebApp");
		
		#ifcode JAVASCRIPT then
		if (web_app.history.count() == 0)
		{
			document.location = document.location;
		}
		else if (e.state != null && typeof e.state.href == "string")
		{
			web_app.history.pop(ctx);
			(async () => {
				try { await web_app.renderPage(ctx, e.state.href); }
				catch (e) { console.log(e.stack); }
			})();
		}
		else
		{
			web_app.history.pop(ctx);
			(async () => {
				try { await web_app.renderPage(ctx, "/"); }
				catch (e) { console.log(e.stack); }
			})();
		}
		#endif
	}
	
	
	
	/**
	 * Split route prefix
	 */
	pure memorize string splitRoutePrefix(string request_uri, string route_prefix)
	{
		int prefix_len = rs::strlen(route_prefix);
		if (prefix_len > 0)
		{
			int pos = rs::search(request_uri, route_prefix);
			if (pos == -1)
			{
				return null;
			}
			request_uri = rs::substr(request_uri, prefix_len);
		}
		if (request_uri == "") request_uri = "/";
		return request_uri;
	}
	
	
	
	/**
	 * Returns middlewares
	 */
	pure memorize Collection<BaseStruct> getMiddlewares
	(string class_name, string method_name, string middleware_class_name)
	{
		Collection<BaseStruct> middlewares = [];
		
		/* Get middleware from class */
		Dict info = rtl::methodApply(class_name, "getClassInfo");
		middlewares = middlewares.concatIm
		(
			info["annotations"].filter( lib::isInstance(middleware_class_name) )
		)
		
		/* Get middleware from method */
		Dict info = rtl::methodApply
		(
			class_name, "getMethodInfoByName", [method_name]
		);
		middlewares = middlewares.concatIm
		(
			info["annotations"].filter( lib::isInstance(middleware_class_name) )
		);
		
		return middlewares;
	}
	
	
	
	/**
	 * Render chain
	 * Create layout model
	 */
	@LambdaChain
	{
		"name": static::RENDER_CHAIN,
		"pos": static::RENDER_CHAIN_CREATE_LAYOUT_MODEL,
	}
	static RenderContainer renderChain_CreateLayoutModel(RenderContainer container)
	{
		if (container == null) return [ container ];
		if (container.isResponseExists()) return [ container ];
		
		/* Create LayoutModel */
		container <= layout <= new LayoutModel
		{
			"uri": static::splitRoutePrefix(container.request.uri, container.request.route_prefix),
			"f_inc": @.config(["Runtime.Web.App", "f_inc"], "1"),
			"full_uri": container.request.uri,
			"route": container.route,
			"route_prefix": container.request.route_prefix,
			"route_params": container.route_params,
			"model": container.layout.model,
		};
		
		return [ container ];
	}
	
	
	
	/**
	 * Render chain
	 * Call route middlewares
	 */
	@LambdaChain
	{
		"name": static::RENDER_CHAIN,
		"pos": static::RENDER_CHAIN_CALL_ROUTE_MIDDLEWARE,
		"is_async": true,
	}
	static async RenderContainer renderChain_CallRouteMiddleware(RenderContainer container)
	{
		if (container == null) return [ container ];
		if (container.isResponseExists()) return [ container ];
		if (container.isPageExists()) return [ container ];
		if (not container.isRouteExists()) return [ container ];
		
		/* Get middleware from class */
		Collection<RouteMiddleware> middlewares = static::getMiddlewares
		(
			container.route.class_name,
			container.route.class_method_name,
			classof RouteMiddleware
		);
		
		/* Run each middleware */
		for (int i=0; i<middlewares.count(i); i++)
		{
			RouteMiddleware m = middlewares.item(i);
			Collection arr = rs::split("::", m.value);
			string class_name = arr.get(0, "");
			string method_name = arr.get(1, "");
			fn f = rtl::method(class_name, method_name);
			
			/* Run method */
			list res = await f(container);
			container = res[0];
		}
		
		return [ container ];
	}
	
	
	
	/**
	 * Render chain
	 * Call route
	 */
	@LambdaChain
	{
		"name": static::RENDER_CHAIN,
		"pos": static::RENDER_CHAIN_CALL_ROUTE,
		"is_async": true,
	}
	static async RenderContainer renderChain_CallRoute(RenderContainer container)
	{
		if (container == null) return [ container ];
		if (container.isResponseExists()) return [ container ];
		if (container.isPageExists()) return [ container ];
		if (not container.isRouteExists()) return [ container ];
		
		container = await rtl::methodApplyAsync
		(
			container.route.class_name,
			container.route.class_method_name,
			[ container ]
		) |> attr 0;
		
		return [ container ];
	}
	
	
	
	#ifdef BACKEND then
	
	/**
	 * Render chain. Set frontend enviroments
	 */
	@LambdaChain
	{
		"name": static::RENDER_CHAIN,
		"pos": static::RENDER_CHAIN_SET_FRONTEND_ENVIROMENTS,
	}
	pure RenderContainer renderChain_SetFrontendEnv(RenderContainer container)
	{
		container <= frontend_env <= "APP_MODE" <= @.env("APP_MODE", "prod");
		container <= frontend_env <= "X-APP-HASH" <= RenderDriver::hash(@.main_class);
		container <= frontend_env <= "X-ROUTE-PREFIX" <= @.env("X-ROUTE-PREFIX", "");
		return [ container ];
	}
	
	
	
	/**
	 * Render chain
	 * Create layout model
	 */
	@LambdaChain
	{
		"name": static::RENDER_CHAIN,
		"pos": static::RENDER_CHAIN_RESPONSE,
	}
	static RenderContainer renderChain_CreateResponse(RenderContainer container)
	{
		if (container == null) return [ container ];
		if (container.isResponseExists()) return [ container ];
		
		/* Get params */
		LayoutModel layout = static::callLayoutChain(container.layout);
		Dict params = {};
		
		/* Render layout */
		fn render = rtl::method(layout.layout_class, "render");
		string layout_content = render(layout, layout, {}, null);
		
		/* Render pattern */
		fn render = rtl::method(container.pattern_class, "render");
		string patter_content = render(container, layout, params, layout_content);
		
		/* Create response */
		container <= response <= new Response
		{
			"content": patter_content,
			"headers": container.new_headers,
			"http_code": container.new_http_code,
		};
		
		return [ container ];
	}
	
	
	#endif
	
	
	
	/**
	 * Render chain
	 */
	static async RenderContainer callRenderChain(RenderContainer container)
	{
		container = await @.chainAsync(static::RENDER_CHAIN, [container]) |> attr 0;
		return container;
	}
	
	
	
	/**
	 * Returns title
	 */
	pure string callTitleChain(LayoutModel layout, string title)
	{
		title = @.chain(static::TITLE_CHAIN, [layout, title]) |> attr 1;
		return title;
	}
	
	
	
	/**
	 * Layout chain
	 */
	pure LayoutModel callLayoutChain(LayoutModel layout)
	{
		layout = @.chain(static::LAYOUT_CHAIN, [layout]) |> attr 0;
		return layout;
	}
	
	
	
	/**
	 * Returns layout CSS
	 */
	pure string getLayoutCSS(LayoutModel layout)
	{
		RenderDriver render = @.getDriver("RenderDriver");
		
		/* Get components */
		Collection components = render.components
			.concat([layout.layout_class,layout.page_class])
			.filter(lib::equalNot(""))
			.removeDuplicatesIm()
		;
		
		/* Returns css from components */
		string css = render.getCSS(components);
		return css;
	}
	
	
	
	/**
	 * Remote bus call
	 * @param Dict items
	 * @return RemoteCallAnswer
	 */
	static async RemoteCallAnswer externalBusCall(Dict items)
	{
		/* Set default params */
		items = items.copy
		{
			"app_name": items.get("app_name", "self"),
			"interface_name": items.get("interface_name", "default"),
		};
		
		/* Change api request */
		RemoteCallRequest request = new RemoteCallRequest(items);
		list res = await @.chainAsync(static::EXTERNAL_BUS_CHAIN, [request]);
		request = res[0] |> default RemoteCallRequest null;
		
		/* Send request */
		BusInterface bus = @.getDriver("external_bus");
		RemoteCallAnswer answer = await bus.remoteBusCall(request);
		
		return answer;
	}
}