/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.App;

use Runtime.BaseStruct;
use Runtime.Web.App.PageModel;
use Runtime.Web.App.RenderContainer;


struct WidgetModel extends BaseStruct
{
	string action = "";
	string class_name = "";
	
	
	/**
	 * Extend widget model
	 */
	pure PageModel extendWidgetModel(BaseStruct layout, PageModel model, Dict params, string widget_key) => model;
	
	
	
	/**
	 * Call route widget model
	 */
	static async WidgetModel callRouteWidgetModel(RenderContainer container, string widget_key, WidgetModel widget_model) =>
		widget_model;
	
	
	
	/**
	 * Call route
	 */
	static async RenderContainer callRoute(RenderContainer container, string widget_key)
	{
		/* Page class */
		string page_class = container.layout.page_class;
		
		/* Get page model */
		PageModel page_model = container.getPageModel();
		if (page_model == null) return container;
		
		/* Get widget model */
		WidgetModel widget_model = page_model.widgets[widget_key] |> default WidgetModel null;
		if (widget_model == null) return container;
		
		/* Check widget model page action */
		if (widget_model.page_action != page_model.page_action) return container;
		
		/* Search */
		widget_model = await static::callRouteWidgetModel(container, widget_key, widget_model);
		
		/* Set widget model */
		page_model <= widgets <= { widget_key } <= widget_model;
		
		/* Set page model */
		container <= layout <= model <= { page_class } <= page_model;
		
		return container;
	}
}