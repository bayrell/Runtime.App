/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.App;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.Web.Message;
use Runtime.Web.App.Cookie;
use Runtime.Web.App.LayoutModel;
use Runtime.Web.App.Page;
use Runtime.Web.App.PageModel;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;
use Runtime.Web.App.Request;
use Runtime.Web.App.Response;
use Runtime.Web.App.Route;
use Runtime.Web.App.WebApp;
use Runtime.Web.App.WidgetModel;


struct RenderContainer extends BaseStruct
{
	Request request = null;
	Response response = null;
	Route route = null;
	Dict<string> route_params = null;
	LayoutModel layout = null;
	
	/* Pattern settings */
	string pattern_name = "default";
	string pattern_class = "";
	
	/* Frontend settings */
	Dict frontend_env = {};
	
	/* Backend settings */
	Dict<primitive> api_storage = new Dict();
	Dict<Cookie> new_cookies = {};
	Collection<string> new_headers = [];
	int new_http_code = 200;
	
	/* Functions */
	bool isRequestExists() => this.request != null;
	bool isResponseExists() => this.response != null;
	bool isRouteExists() => 
		this.route != null and this.route_params != null and
		this.route.class_name != "" and this.route.class_method_name != ""
	;
	bool isPageExists() => this.layout != null and this.layout.page_class != "";
	
	
	
	/**
	 * Set page
	 */
	RenderContainer setPage(string page_class) =>
		rtl::setAttr(this, ["layout", "page_class"], page_class);
	
	
	
	/**
	 * Set page model
	 */
	RenderContainer setPageModel(primitive page_model) =>
		rtl::setAttr(this, ["layout", "model", this.layout.page_class], page_model)
	;
	
	
	
	/**
	 * Returns page model
	 */
	PageModel getPageModel(Collection model_path = null) =>
		this.layout.model
		|> lib::attr( [ this.layout.page_class ].concat(model_path) )
	;
	
	
	
	/**
	 * Set action
	 */
	RenderContainer setPageAction(string page_action) =>
		rtl::setAttr(this, ["layout", "model", this.layout.page_class, "page_action"], page_action);
	
	
	
	/**
	 * Set action
	 */
	RenderContainer setPageModelAttr(Collection attr, var value) =>
		rtl::setAttr(this, ["layout", "model", this.layout.page_class].concat(attr), value);
		
		
	
	/**
	 * Set title
	 */
	RenderContainer setTitle(string title) => rtl::setAttr(this, ["layout", "title"], title);
	
	
	
	/**
	 * Set layout name
	 */
	RenderContainer setLayout(string layout_name) => rtl::setAttr(this, ["layout", "layout_name"], layout_name);
	
	
	
	/**
	 * Add widget
	 */
	RenderContainer addWidget(string widget_key, WidgetModel widget = null)
	{
		RenderContainer container = this;
		PageModel page_model = container["layout", "model", this.layout.page_class] |> default PageModel null;
		if (page_model == null) return container;
		
		/* Push widget */
		Dict<WidgetModel> widgets = page_model.widgets;
		widgets = widgets.setIm(widget_key, widget);
		
		/* Add widgets to container */
		page_model <= widgets <= widgets;
		
		/* Set new model */
		container = rtl::setAttr(container, ["layout", "model", this.layout.page_class], page_model)
		
		return container;
	}
	
	
	
	/**
	 * Set widgets position
	 */
	RenderContainer widgetsPosition(string page_action, Collection widgets)
	{
		RenderContainer container = this;
		PageModel page_model = container["layout", "model", this.layout.page_class] |> default PageModel null;
		if (page_model == null) return container;
		
		/* Push widgets position */
		Dict<Collection> widgets_position = page_model.widgets_position;
		widgets_position = widgets_position.setIm(page_action, widgets);
		
		/* Add widgets position to container */
		page_model <= widgets_position <= widgets_position;
		
		/* Set new model */
		container = rtl::setAttr(container, ["layout", "model", this.layout.page_class], page_model)
		
		return container;
	}
	
	
	
	/**
	 * Remote bus call
	 * @param Dict items
	 * @return RemoteCallAnswer
	 */
	async RemoteCallAnswer externalBusCall(Dict items)
	{
		/* Set storage */
		items = items.copy
		{
			"api_storage": this.api_storage,
		};
		
		/* Send request */
		return await WebApp::externalBusCall(items);
	}
}