/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.App;

use Runtime.BaseStruct;
use Runtime.Web.Message;
use Runtime.Web.App.Cookie;
use Runtime.Web.App.LayoutModel;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;
use Runtime.Web.App.Request;
use Runtime.Web.App.Response;
use Runtime.Web.App.Route;
use Runtime.Web.App.WebApp;


struct RenderContainer extends BaseStruct
{
	Request request = null;
	Response response = null;
	Route route = null;
	Dict<string> route_params = null;
	LayoutModel layout = null;
	
	/* Pattern settings */
	string pattern_name = "default";
	string pattern_class = "";
	
	/* Frontend settings */
	Dict frontend_env = {};
	
	/* Backend settings */
	Dict<primitive> api_storage = new Dict();
	Dict<Cookie> new_cookies = {};
	Collection<string> new_headers = [];
	int new_http_code = 200;
	
	/* Functions */
	bool isRequestExists() => this.request != null;
	bool isResponseExists() => this.response != null;
	bool isRouteExists() => 
		this.route != null and this.route_params != null and
		this.route.class_name != "" and this.route.class_method_name != ""
	;
	bool isPageExists() => this.layout != null and this.layout.page_class != "";
	
	
	
	/**
	 * Set page
	 */
	RenderContainer setPage(string page_class, primitive page_model)
	{
		Dict model = this.layout.model;
		if (model == null) model = {};
		
		/* Set page model */
		model = model.setIm(page_class, page_model);
		
		return this.copy
		{
			"layout": this.layout.copy
			{
				"page_class": page_class,
				"model": model,
			}
		};
	}
	
	
	
	/**
	 * Set page model
	 */
	RenderContainer setPageModel(primitive page_model) =>
		this.setPage(this.layout.page_class, page_model);
	
	
	
	/**
	 * Remote bus call
	 * @param Dict items
	 * @return RemoteCallAnswer
	 */
	async RemoteCallAnswer externalBusCall(Dict items)
	{
		/* Set storage */
		items = items.copy
		{
			"storage": this.api_storage,
		};
		
		/* Send request */
		return await WebApp::externalBusCall(items);
	}
}