<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.App.Page" extends="Runtime.Web.Component" 
	module="Runtime.Web.App" model="Runtime.Web.App.PageModel"
>

<use name="Runtime.BaseStruct" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.WidgetEvent" />
<use name="Runtime.Web.App.WidgetModel" />


<script>
/**
 * Extend component model
 */
pure PageModel extendComponentModel(BaseStruct layout, PageModel model, Dict params)
{
	Collection widgets = model.widgets.keys();
	for (int i=0; i<widgets.count(); i++)
	{
		string widget_key = widgets[i];
		WidgetModel widget = model.widgets[widget_key];
		if (widget != null and rtl::method_exists(widget.getClassName(), "extendWidgetModel"))
		{
			model = widget::extendWidgetModel(layout, model, params, widget_key);
		}
	}
	return model;
}
</script>


<template name="renderWidgets" args="LayoutModel layout, PageModel model, Dict params, string widget_position">

%var Collection widgets = model.widgets_position[widget_position] |> default Collection null;
%if (widgets != null)
{
	%for (int i=0; i<widgets.count(); i++)
	{
		%var string widget_key = widgets[i];
		{ static::renderWidget(layout, model, params, widget_key) }
	}
}

</template>


<template name="renderWidget" args="LayoutModel layout, PageModel model, Dict params, string widget_key">
	%var string class_name = rtl::attr(model, ["widgets", widget_key, "class_name"]) |> default string "";
	%if (class_name != "")
	{
		<div class='widget' data-widget={ widget_key } @key={ widget_key }>
			<{class_name} @bind=[] widget_key={ widget_key } @event:WidgetEvent="onWidgetEvent"></{class_name}>
		</div>
	}
</template>


<script>

/**
 * On widget event
 */
async void onWidgetEvent(Message<WidgetEvent> msg)
{
}

</script>

</class>